2025.01.17 (금)
프로그램의 전체적인 설계를 다시 해본 결과, 구현해야할 기능들이 너무 많고, 너무 많은 걸 한번에 하려고 하고 있다는 걸 깨달았음.
추가적으로 대진표를 자동생성 하도록 만들기 위한 경우의수도 너무 많아서 1월달 안에 모든 걸 만들어보긴 어렵다고 느낌.

따라서 지금부터는 이 프로그램에서 구현하려고 했던 실시간 점수판 기능만 따로 가져와서 기능을 구현하고 앱과 웹으로 나타날 수 있도록 만들 예정.
최종적으로 이 프로젝트는 2월부터 편입 도전을 하기 때문에 잠정적으로 대기.
새로운 프로젝트 파일을 생성해서 점수판 기능만 최대한 빠르게 구현해 볼 예정.


* 탁구 대회에 활용될 수 있는 프로그램 & 앱 *

1. 선수등록 기능 (이름,실력 부수)
2. 게임 종류 기능 (단식, 복식, 단체전)
3. 대회에 대한 기본 정보 제공 ( 날짜 위치 시간 정도..?)
4. 등록 된 선수들끼리 랜덤 대진표 기능 (게임을 통해 이긴 사람들은 승자끼리 대진이 이어질 수 있도록 할 수 있음 좋겠음)
5. 실시간 결과 입력 및 저장 기능 ( 누가 언제 몇 점을 따는지 전체적인 흐름을 볼 수 있는 표나 그래프가 보일 수 있으면 좋겠음)
6. 각 게임 테이블마다 프로그램 및 앱과 연동되는 스크린 마련 ( 실시간으로 점수를 화면 터치와 같은 기능을 통해 점수를 측정하고 점수판의 역할을 함)
7. 전체적인 UI나 UX는 기능을 만들고 디자인을 수정하며 꾸미면 좋을 거 같음.
8. 실제 선수들이나 사람들에게 보여지는 결과 화면과 전체적인 흐름을 관리하는 관리자 화면은 전체적으로 총괄 및 관리할 수 있으며 앱이나 홈페이지에서는 보여지지 않는 다른 관리 화면이었으면 좋겠음.
9. 나중엔 배너같은 거 클릭하면 탁구관련 커뮤니티로 이동하게 할 수도 있으면 베스트

1) 인증/인가(Authorization) 모듈
왜 필요한가?
* 관리자와 일반 사용자(선수, 관람객, etc.)의 권한을 구분해야 한다면, NestJS에 인증 로직이 필요하다.
무엇을 고려?
1. 관리자 전용 화면/기능: 게임 생성, 수정, 대회 종료 등 민감한 조작은 관리자만 가능하도록 한다.
2. JWT나 Session을 통해 사용자 로그인 상태를 관리.
3. Role Guard(예: @Roles('admin')) 등을 NestJS에서 사용해, 관리자에게만 허용되는 라우트를 차단.

2) 대회 진행 상태/스케줄 모듈
왜 필요한가?
* “대회가 아직 준비 단계인지, 진행 중인지, 종료되었는지” 같은 상태 정보를 다루어야 할 수 있다.
* 각 스테이지(예: 1라운드, 2라운드…)별 시간을 기록하거나, 시작/종료 시각을 기록하고 싶을 수도 있다.
무엇을 고려?
1. 대회 상태 필드: “NOT_STARTED / IN_PROGRESS / FINISHED” 같은 enum 필드.
2. 진행 스케줄: 특정 시간에 자동으로 다음 라운드로 넘어가거나, 관리자가 수동으로 넘어가게 설정.
3. 알림/공지: “곧 2라운드 시작합니다”와 같은 공지를 NestJS에서 실시간 메시지(또는 푸시)로 알려줄 수도 있음.

3) 실시간(Real-time) 점수 업데이트 모듈
왜 필요한가?
* 점수판(게임 테이블)에서 스코어가 바뀔 때, 곧바로 관리자 화면이나 관전 화면에도 반영하고 싶을 수 있다.
무엇을 고려?
1. WebSocket / Socket.IO 게이트웨이 사용
    * NestJS의 @WebSocketGateway() 등을 통해, 점수 변경 시 모든 관련 클라이언트(테이블, 관중 웹, 관리자 페이지)에게 전송.
2. 점수 기록
    * DB(또는 in-memory) 구조로, 어느 게임ID에 어떤 점수가 들어갔는지 저장.
3. 게임 종료 조건
    * 점수가 예: 11점이 되면 게임 종료? (탁구 규칙이 여러 가지이므로)
    * 자동 종료 로직 및 “게임 종료” 이벤트를 실시간으로 알림.

4) 랭킹/통계 모듈
왜 필요한가?
* 선수가 여러 대회 참여 시, 누적 승/패, 점수득실 등을 바탕으로 랭킹 산정이 가능할 수 있다.
무엇을 고려?
1. 랭킹 계산 로직
    * 승리 시 +점수, 패배 시 -점수? 특정 공식.
    * 여러 대회 결과를 합산하여 ELO처럼 변동 랭킹 계산?
2. 통계 API
    * 선수별 전적, 득실점, 승률.
    * 게임별 평균 점수, 가장 빠른 종료 시간 등, 재미있는 통계를 제공해줄 수도 있다.

5) 알림/이벤트 모듈
왜 필요한가?
* 대회 시작 전, 선수/사용자들에게 “대회 시작까지 10분 남았습니다” 같은 메시지를 보내거나, 게임이 끝나면 관리자에게 알림.
무엇을 고려?
1. 이메일/SMS/Push 연동
    * 이메일, 문자, 푸시 알림 등 실제 대회 운영을 위해 사용자에게 알림을 보낼 수 있다.
2. NestJS에서 스케줄러 사용
    * @nestjs/schedule 모듈 등을 활용, 특정 시간에 반복/지연된 알림을 전송.

6) 사용자(관중‧선수) 참여 모듈
왜 필요한가?
* “로그인 후 대회 참여 신청하기” 같은 기능이 있다면, 사용자 정보/인증이 필수.
무엇을 고려?
1. User vs. Player 차이
    * “선수(Player)”는 경기 참가자인 동시에 “User”일 수도 있다(로그인 계정).
    * 관중(일반 사용자)도 User이지만 Player는 아닐 수 있다.
2. 참가 신청 / 취소 로직
    * 대회 정보(마감 인원, 마감 시간 등)와 연동해 참가 처리.

7) 관리자(Organizers) 기능 모듈 (O)
왜 필요한가?
* 대회를 열거나(생성), 종료를 선언하거나, 특정 선수를 강제 탈락 시키는 등 관리자의 특별 기능이 필요할 수 있다.
무엇을 고려?
1. 게임 생성/삭제: POST /games, DELETE /games/:id
2. 대회 시작/종료: PATCH /tournaments/:id/start, PATCH /tournaments/:id/end
3. 비정상 종료 처리: 예를 들어, 선수가 갑자기 기권하면 기록에 반영
4. UI 권한: 관리자 페이지에서만 이 API 호출 가능하도록.

8) 검색/필터/정렬 기능
왜 필요한가?
* 선수가 수백 명, 대회가 수십 개가 되면, “선수 이름 검색, 레벨순 정렬, 날짜별 대회 조회”가 필요할 수 있다.
무엇을 고려?
1. API에 쿼리 파라미터
    * 예: GET /players?search=홍&level=중급&sort=level
2. DB Query (ORM)
    * TypeORM/Prisma에서 조건(where), orderBy 등을 적용해 필터링, 정렬.

9) 안전/에러 처리
왜 필요한가?
* 대회에 없는 playerId를 대진표에 넣으려 한다든지, 이미 끝난 게임에 점수를 넣으려 하는 경우 등.
무엇을 고려?
1. NestJS 예외(Exception) 시스템
    * throw new NotFoundException(...), throw new BadRequestException(...) 등을 통해 적절한 HTTP 에러 코드와 메시지 전송.
2. Validation Pipe
    * class-validator를 활용해 DTO(데이터 전송 객체)에 유효성 검사. 예: 이름은 필수, 점수는 0 이상이어야 함 등.


플레이어와 관련된 추가 기능
1. 선수 수정 기능
* 이미 등록된 선수의 정보를 수정하는 기능.
* 예를 들어:
    * 이름, 나이(년도가 지날 때마다 자동으로 1살씩 추가되도록), 실력(랭크), 소속 팀 등을 변경.
    * API 엔드포인트: PUT /players/:id
2. 선수 삭제 기능
* 특정 선수의 정보를 삭제. (실수로 삭제한 경우에는 되돌릴 수 있는 기능도 있어야함)
* 예를 들어:
    * 관리자가 실수로 잘못 등록된 선수를 제거.
    * API 엔드포인트: DELETE /players/:id
3. 특정 기준으로 선수 검색
* 예를 들어:
    * 실력이 특정 점수 이상인 선수만 조회.
    * 특정 팀에 소속된 선수만 조회.
    * API 엔드포인트: GET /players?rank=5
4. 선수 통계 기능
* 예를 들어:
    * 특정 토너먼트에서 승리 횟수.
    * 승률 계산.
    * 평균 점수 등의 통계를 제공.
5. 선수 그룹화
* 예를 들어:
    * 실력에 따라 그룹으로 나누기.
    * 토너먼트 조 편성을 위해 선수들을 자동으로 배치.
6. 파일 업로드를 통한 대량 선수 등록
* CSV 파일을 업로드하면 여러 선수를 한 번에 등록.
* 예를 들어:
    * 팀 관리자가 선수 정보를 한꺼번에 등록.
7. 선수 활동 기록
* 예를 들어:
    * 과거의 게임 기록 저장.
    * 각 선수의 점수 변동 그래프를 생성.

    대회 리스트 
( 대회 일자, 대회 명, 대회 접수 일자, 테이블 갯수, 등록자 )

대회 등록 리스트 
( 선택한 대회 정보들 자동 입력 + 연락처, 주관하는 곳 정보, 은행계좌, 개인전 & 단체전 & 복식 등 종목별 가격 설정, 기타 설명란 )

종목 등록 리스트 
( 실력, 성별, 게임 종목 방식, 현재 참여 인원, 제한된 참여 인원 초과시 대기 인원으로 설정, 
기타 설명란 )

참가자 등록 
( 참가 신청은 참가자가 스스로 선택한 대회에서 본인의 종목을 신청하는 방식으로, 운영자가 추가도 가능, 화면에는 대회 일자 & 접수 일자 & 주최자 연락처 & 은행계좌 & 기타 설명란 표시, 
[접수하기] [돌아가기] 기능 )

참가자 등록 명단 확인
( 번호, 팀 (동호회)명, 실력, 참가 선수명 )

조편성 기능
( 비슷한 실력을 묶어야함.., 예선을 거치고 토너먼트를 진행, 동네탁구장은 3~4명씩 1조를 이루게 하고 각 조에서 1등부터 4등까지 다른 조와 토너먼트를 진행 ex: 1등 vs 4등 느낌?, 홀수로 떨어지는 구조는 부전승이 많이 나온다고 함.. 근데 생각해야할 경우의수가 너무 많을 거 같은데 주최자 맘이라고 함.)

경기일정 표
(대진표가 짜진 걸 기준으로 보여줄 수 있게.. 어떤 정보를 담아서 보여줄지는 생각해보기)